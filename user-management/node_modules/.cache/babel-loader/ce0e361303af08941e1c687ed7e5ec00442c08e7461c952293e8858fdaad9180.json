{"ast":null,"code":"var _jsxFileName = \"D:\\\\assignment\\\\user-management\\\\src\\\\components\\\\UserList.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import UserForm from \"./UserForm\";\n// import \"./UserList.css\";\n\n// const UserList = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState(\"\");\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingUser, setEditingUser] = useState(null);\n\n//     const [currentPage, setCurrentPage] = useState(1);\n//     const [usersPerPage] = useState(6); // Show 5 users per page\n\n//     // Fetch users from the API\n\n//     useEffect(() => {\n//         const fetchUsers = async () => {\n//             try {\n//                 const response = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n//                 setUsers(response.data);\n//             } catch (err) {\n//                 setError(\"Failed to fetch users. Please try again later.\");\n//             }\n//         };\n//         fetchUsers();\n//     }, []);\n\n//     // Pagination Logic\n\n//     const indexOfLastUser = currentPage * usersPerPage;\n//     const indexOfFirstUser = indexOfLastUser - usersPerPage;\n//     const currentUsers = users.slice(indexOfFirstUser, indexOfLastUser);\n\n//     const paginate = (pageNumber) => setCurrentPage(pageNumber);\n//     const totalPages = Math.ceil(users.length / usersPerPage);\n\n//     // Handle to delete a user\n\n//     const handleDelete = async (id) => {\n//         try {\n//             await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n//             setUsers(users.filter((user) => user.id !== id));\n//         } catch {\n//             setError(\"Failed to delete the user. Please try again.\");\n//         }\n//     };\n\n//     // Handle to  edit a user\n//     const handleEdit = (user) => {\n//         setEditingUser(user);\n//         setShowForm(true);\n//     };\n\n//     // Handle to add a new user\n\n//     const handleAdd = () => {\n//         setEditingUser(null);\n//         setShowForm(true);\n//     };\n\n//     // Handle saving a new or edited user\n\n//     const handleSave = (newUser) => {\n//         if (editingUser) {\n//             // PUT request to update the user on the server\n\n//             axios.put(`https://jsonplaceholder.typicode.com/users/${newUser.id}`, newUser)\n//                 .then(response => {\n//                     setUsers(users.map((user) => (user.id === newUser.id ? newUser : user)));\n//                     setShowForm(false);\n//                 })\n//                 .catch(error => {\n//                     setError(\"Failed to save changes. Please try again.\");\n//                 });\n//         } else {\n//             // POST request to add a new user\n\n//             axios.post(\"https://jsonplaceholder.typicode.com/users\", newUser)\n//                 .then(response => {\n//                     // Simulate adding a new user by generating an ID\n//                     setUsers([...users, { ...newUser, id: Date.now() }]);\n//                     setShowForm(false);\n//                 })\n//                 .catch(error => {\n//                     setError(\"Failed to add the user. Please try again.\");\n//                 });\n//         }\n//     };\n\n//     return (\n//         <div className=\"user-list-container\">\n//             <h2>User List</h2>\n\n//             {/* user list table */}\n\n//             <div className=\"table-container\">\n//                 <table className=\"user-table\">\n//                     <thead>\n//                         <tr>\n//                             <th>ID</th>\n//                             <th>First Name</th>\n//                             <th>Last Name</th>\n//                             <th>Email</th>\n//                             <th>Department</th>\n//                             <th>Actions</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {currentUsers.map((user) => (\n//                             <tr key={user.id}>\n//                                 <td>{user.id}</td>\n//                                 <td>{user.name.split(\" \")[0]}</td>\n//                                 <td>{user.name.split(\" \")[1]}</td>\n//                                 <td>{user.email}</td>\n//                                 <td>{user.department || \"N/A\"}</td>\n//                                 <td>\n//                                     <button onClick={() => handleEdit(user)} className=\"edit-btn\">Edit</button>\n//                                     <button onClick={() => handleDelete(user.id)} className=\"delete-btn\">Delete</button>\n//                                 </td>\n//                             </tr>\n//                         ))}\n//                     </tbody>\n//                 </table>\n\n//                 {/* Pagination Button */}\n\n//                 <div className=\"pagination-container\">\n//                     {Array.from({ length: totalPages }, (_, index) => (\n//                         <button\n//                             key={index}\n//                             onClick={() => paginate(index + 1)}\n//                             className=\"pagination-btn\"\n//                         >\n//                             {index + 1}\n//                         </button>\n//                     ))}\n//                 </div>\n//             </div>\n\n//             {/* Add user button */}\n//             <div className=\"add-user-container\">\n//                 <button\n//                     onClick={handleAdd}\n//                     className=\"add-user-btn\"\n//                 >\n//                     Add User\n//                 </button>\n//             </div>\n\n//             {/* Render user from outside the list */}\n\n//             {showForm && (\n//                 <div className=\"user-form-container\">\n//                     <UserForm user={editingUser} onSave={handleSave} onCancel={() => setShowForm(false)} />\n//                 </div>\n//             )}\n\n//             {error && <p className=\"error-message\">{error}</p>}\n//         </div>\n//     );\n// };\n\n// export default UserList;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport UserForm from \"./UserForm\";\nimport \"./UserList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserList = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [showForm, setShowForm] = useState(false);\n  const [editingUser, setEditingUser] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [usersPerPage] = useState(6); // Show 6 users per page\n\n  // Fetch users from the API\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n        setUsers(response.data);\n      } catch (err) {\n        setError(\"Failed to fetch users. Please try again later.\");\n      }\n    };\n    fetchUsers();\n  }, []);\n\n  // Clear error when dismissed or new API calls succeed\n  const clearError = () => setError(\"\");\n\n  // Pagination Logic\n  const indexOfLastUser = currentPage * usersPerPage;\n  const indexOfFirstUser = indexOfLastUser - usersPerPage;\n  const currentUsers = users.slice(indexOfFirstUser, indexOfLastUser);\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  const totalPages = Math.ceil(users.length / usersPerPage);\n\n  // Handle delete user\n  const handleDelete = async id => {\n    try {\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n      setUsers(users.filter(user => user.id !== id));\n    } catch {\n      setError(\"Failed to delete the user. Please try again.\");\n    }\n  };\n\n  // Handle edit user\n  const handleEdit = user => {\n    setEditingUser(user);\n    setShowForm(true);\n  };\n\n  // Handle add new user\n  const handleAdd = () => {\n    setEditingUser(null);\n    setShowForm(true);\n  };\n\n  // Handle save user\n  const handleSave = newUser => {\n    if (editingUser) {\n      // PUT request to update the user\n      axios.put(`https://jsonplaceholder.typicode.com/users/${newUser.id}`, newUser).then(response => {\n        setUsers(users.map(user => user.id === newUser.id ? newUser : user));\n        setShowForm(false);\n        clearError();\n      }).catch(() => {\n        setError(\"Failed to save changes. Please try again.\");\n      });\n    } else {\n      // POST request to add a new user\n      axios.post(\"https://jsonplaceholder.typicode.com/users\", newUser).then(response => {\n        // Simulate adding a new user by generating an ID\n        setUsers([...users, {\n          ...newUser,\n          id: Date.now()\n        }]);\n        setShowForm(false);\n        clearError();\n      }).catch(() => {\n        setError(\"Failed to add the user. Please try again.\");\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearError,\n        className: \"close-error-btn\",\n        children: \"Dismiss\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"user-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"First Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Last Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Department\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: currentUsers.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.name.split(\" \")[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.name.split(\" \")[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.department || \"N/A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleEdit(user),\n                className: \"edit-btn\",\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDelete(user.id),\n                className: \"delete-btn\",\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 33\n            }, this)]\n          }, user.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination-container\",\n        children: Array.from({\n          length: totalPages\n        }, (_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => paginate(index + 1),\n          className: \"pagination-btn\",\n          children: index + 1\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-user-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAdd,\n        className: \"add-user-btn\",\n        children: \"Add User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-form-container\",\n      children: /*#__PURE__*/_jsxDEV(UserForm, {\n        user: editingUser,\n        onSave: handleSave,\n        onCancel: () => setShowForm(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 9\n  }, this);\n};\n_s(UserList, \"SLuMtI+KIgCOEhbXtEQULSMFgjs=\");\n_c = UserList;\nexport default UserList;\nvar _c;\n$RefreshReg$(_c, \"UserList\");","map":{"version":3,"names":["React","useState","useEffect","axios","UserForm","jsxDEV","_jsxDEV","UserList","_s","users","setUsers","error","setError","showForm","setShowForm","editingUser","setEditingUser","currentPage","setCurrentPage","usersPerPage","fetchUsers","response","get","data","err","clearError","indexOfLastUser","indexOfFirstUser","currentUsers","slice","paginate","pageNumber","totalPages","Math","ceil","length","handleDelete","id","delete","filter","user","handleEdit","handleAdd","handleSave","newUser","put","then","map","catch","post","Date","now","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","split","email","department","Array","from","_","index","onSave","onCancel","_c","$RefreshReg$"],"sources":["D:/assignment/user-management/src/components/UserList.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import UserForm from \"./UserForm\";\r\n// import \"./UserList.css\";\r\n\r\n// const UserList = () => {\r\n//     const [users, setUsers] = useState([]);\r\n//     const [error, setError] = useState(\"\");\r\n//     const [showForm, setShowForm] = useState(false);\r\n//     const [editingUser, setEditingUser] = useState(null);\r\n\r\n//     const [currentPage, setCurrentPage] = useState(1);\r\n//     const [usersPerPage] = useState(6); // Show 5 users per page\r\n\r\n//     // Fetch users from the API\r\n\r\n//     useEffect(() => {\r\n//         const fetchUsers = async () => {\r\n//             try {\r\n//                 const response = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\r\n//                 setUsers(response.data);\r\n//             } catch (err) {\r\n//                 setError(\"Failed to fetch users. Please try again later.\");\r\n//             }\r\n//         };\r\n//         fetchUsers();\r\n//     }, []);\r\n\r\n//     // Pagination Logic\r\n\r\n//     const indexOfLastUser = currentPage * usersPerPage;\r\n//     const indexOfFirstUser = indexOfLastUser - usersPerPage;\r\n//     const currentUsers = users.slice(indexOfFirstUser, indexOfLastUser);\r\n\r\n//     const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n//     const totalPages = Math.ceil(users.length / usersPerPage);\r\n\r\n//     // Handle to delete a user\r\n\r\n//     const handleDelete = async (id) => {\r\n//         try {\r\n//             await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n//             setUsers(users.filter((user) => user.id !== id));\r\n//         } catch {\r\n//             setError(\"Failed to delete the user. Please try again.\");\r\n//         }\r\n//     };\r\n\r\n//     // Handle to  edit a user\r\n//     const handleEdit = (user) => {\r\n//         setEditingUser(user);\r\n//         setShowForm(true);\r\n//     };\r\n\r\n//     // Handle to add a new user\r\n\r\n//     const handleAdd = () => {\r\n//         setEditingUser(null);\r\n//         setShowForm(true);\r\n//     };\r\n\r\n//     // Handle saving a new or edited user\r\n\r\n//     const handleSave = (newUser) => {\r\n//         if (editingUser) {\r\n//             // PUT request to update the user on the server\r\n\r\n//             axios.put(`https://jsonplaceholder.typicode.com/users/${newUser.id}`, newUser)\r\n//                 .then(response => {\r\n//                     setUsers(users.map((user) => (user.id === newUser.id ? newUser : user)));\r\n//                     setShowForm(false);\r\n//                 })\r\n//                 .catch(error => {\r\n//                     setError(\"Failed to save changes. Please try again.\");\r\n//                 });\r\n//         } else {\r\n//             // POST request to add a new user\r\n\r\n//             axios.post(\"https://jsonplaceholder.typicode.com/users\", newUser)\r\n//                 .then(response => {\r\n//                     // Simulate adding a new user by generating an ID\r\n//                     setUsers([...users, { ...newUser, id: Date.now() }]);\r\n//                     setShowForm(false);\r\n//                 })\r\n//                 .catch(error => {\r\n//                     setError(\"Failed to add the user. Please try again.\");\r\n//                 });\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"user-list-container\">\r\n//             <h2>User List</h2>\r\n\r\n//             {/* user list table */}\r\n\r\n//             <div className=\"table-container\">\r\n//                 <table className=\"user-table\">\r\n//                     <thead>\r\n//                         <tr>\r\n//                             <th>ID</th>\r\n//                             <th>First Name</th>\r\n//                             <th>Last Name</th>\r\n//                             <th>Email</th>\r\n//                             <th>Department</th>\r\n//                             <th>Actions</th>\r\n//                         </tr>\r\n//                     </thead>\r\n//                     <tbody>\r\n//                         {currentUsers.map((user) => (\r\n//                             <tr key={user.id}>\r\n//                                 <td>{user.id}</td>\r\n//                                 <td>{user.name.split(\" \")[0]}</td>\r\n//                                 <td>{user.name.split(\" \")[1]}</td>\r\n//                                 <td>{user.email}</td>\r\n//                                 <td>{user.department || \"N/A\"}</td>\r\n//                                 <td>\r\n//                                     <button onClick={() => handleEdit(user)} className=\"edit-btn\">Edit</button>\r\n//                                     <button onClick={() => handleDelete(user.id)} className=\"delete-btn\">Delete</button>\r\n//                                 </td>\r\n//                             </tr>\r\n//                         ))}\r\n//                     </tbody>\r\n//                 </table>\r\n\r\n//                 {/* Pagination Button */}\r\n\r\n//                 <div className=\"pagination-container\">\r\n//                     {Array.from({ length: totalPages }, (_, index) => (\r\n//                         <button\r\n//                             key={index}\r\n//                             onClick={() => paginate(index + 1)}\r\n//                             className=\"pagination-btn\"\r\n//                         >\r\n//                             {index + 1}\r\n//                         </button>\r\n//                     ))}\r\n//                 </div>\r\n//             </div>\r\n\r\n//             {/* Add user button */}\r\n//             <div className=\"add-user-container\">\r\n//                 <button\r\n//                     onClick={handleAdd}\r\n//                     className=\"add-user-btn\"\r\n//                 >\r\n//                     Add User\r\n//                 </button>\r\n//             </div>\r\n\r\n//             {/* Render user from outside the list */}\r\n\r\n//             {showForm && (\r\n//                 <div className=\"user-form-container\">\r\n//                     <UserForm user={editingUser} onSave={handleSave} onCancel={() => setShowForm(false)} />\r\n//                 </div>\r\n//             )}\r\n\r\n//             {error && <p className=\"error-message\">{error}</p>}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default UserList;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport UserForm from \"./UserForm\";\r\nimport \"./UserList.css\";\r\n\r\nconst UserList = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [error, setError] = useState(\"\");\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [editingUser, setEditingUser] = useState(null);\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [usersPerPage] = useState(6); // Show 6 users per page\r\n\r\n    // Fetch users from the API\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const response = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\r\n                setUsers(response.data);\r\n            } catch (err) {\r\n                setError(\"Failed to fetch users. Please try again later.\");\r\n            }\r\n        };\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    // Clear error when dismissed or new API calls succeed\r\n    const clearError = () => setError(\"\");\r\n\r\n    // Pagination Logic\r\n    const indexOfLastUser = currentPage * usersPerPage;\r\n    const indexOfFirstUser = indexOfLastUser - usersPerPage;\r\n    const currentUsers = users.slice(indexOfFirstUser, indexOfLastUser);\r\n\r\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n    const totalPages = Math.ceil(users.length / usersPerPage);\r\n\r\n    // Handle delete user\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n            setUsers(users.filter((user) => user.id !== id));\r\n        } catch {\r\n            setError(\"Failed to delete the user. Please try again.\");\r\n        }\r\n    };\r\n\r\n    // Handle edit user\r\n    const handleEdit = (user) => {\r\n        setEditingUser(user);\r\n        setShowForm(true);\r\n    };\r\n\r\n    // Handle add new user\r\n    const handleAdd = () => {\r\n        setEditingUser(null);\r\n        setShowForm(true);\r\n    };\r\n\r\n    // Handle save user\r\n    const handleSave = (newUser) => {\r\n        if (editingUser) {\r\n            // PUT request to update the user\r\n            axios\r\n                .put(`https://jsonplaceholder.typicode.com/users/${newUser.id}`, newUser)\r\n                .then((response) => {\r\n                    setUsers(users.map((user) => (user.id === newUser.id ? newUser : user)));\r\n                    setShowForm(false);\r\n                    clearError();\r\n                })\r\n                .catch(() => {\r\n                    setError(\"Failed to save changes. Please try again.\");\r\n                });\r\n        } else {\r\n            // POST request to add a new user\r\n            axios\r\n                .post(\"https://jsonplaceholder.typicode.com/users\", newUser)\r\n                .then((response) => {\r\n                    // Simulate adding a new user by generating an ID\r\n                    setUsers([...users, { ...newUser, id: Date.now() }]);\r\n                    setShowForm(false);\r\n                    clearError();\r\n                })\r\n                .catch(() => {\r\n                    setError(\"Failed to add the user. Please try again.\");\r\n                });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"user-list-container\">\r\n            <h2>User List</h2>\r\n\r\n            {/* Error message */}\r\n            {error && (\r\n                <div className=\"error-message\">\r\n                    <p>{error}</p>\r\n                    <button onClick={clearError} className=\"close-error-btn\">\r\n                        Dismiss\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            {/* User list table */}\r\n            <div className=\"table-container\">\r\n                <table className=\"user-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Email</th>\r\n                            <th>Department</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {currentUsers.map((user) => (\r\n                            <tr key={user.id}>\r\n                                <td>{user.id}</td>\r\n                                <td>{user.name.split(\" \")[0]}</td>\r\n                                <td>{user.name.split(\" \")[1]}</td>\r\n                                <td>{user.email}</td>\r\n                                <td>{user.department || \"N/A\"}</td>\r\n                                <td>\r\n                                    <button onClick={() => handleEdit(user)} className=\"edit-btn\">Edit</button>\r\n                                    <button onClick={() => handleDelete(user.id)} className=\"delete-btn\">Delete</button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {/* Pagination */}\r\n                <div className=\"pagination-container\">\r\n                    {Array.from({ length: totalPages }, (_, index) => (\r\n                        <button\r\n                            key={index}\r\n                            onClick={() => paginate(index + 1)}\r\n                            className=\"pagination-btn\"\r\n                        >\r\n                            {index + 1}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Add user button */}\r\n            <div className=\"add-user-container\">\r\n                <button onClick={handleAdd} className=\"add-user-btn\">\r\n                    Add User\r\n                </button>\r\n            </div>\r\n\r\n            {/* Render user form */}\r\n            {showForm && (\r\n                <div className=\"user-form-container\">\r\n                    <UserForm\r\n                        user={editingUser}\r\n                        onSave={handleSave}\r\n                        onCancel={() => setShowForm(false)}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserList;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAM,CAACgB,WAAW,EAAEC,cAAc,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}