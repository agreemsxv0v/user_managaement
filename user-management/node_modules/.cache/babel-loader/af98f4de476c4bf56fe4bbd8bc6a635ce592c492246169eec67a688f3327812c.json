{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import UserForm from \"./UserForm\";\n// import \"./UserList.css\";\n\n// const UserList = () => {\n//     const [users, setUsers] = useState([]);\n//     const [error, setError] = useState(\"\");\n//     const [showForm, setShowForm] = useState(false);\n//     const [editingUser, setEditingUser] = useState(null);\n\n//     const [currentPage, setCurrentPage] = useState(1);\n//     const [usersPerPage] = useState(6); // Show 5 users per page\n\n//     // Fetch users from the API\n\n//     useEffect(() => {\n//         const fetchUsers = async () => {\n//             try {\n//                 const response = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n//                 setUsers(response.data);\n//             } catch (err) {\n//                 setError(\"Failed to fetch users. Please try again later.\");\n//             }\n//         };\n//         fetchUsers();\n//     }, []);\n\n//     // Pagination Logic\n\n//     const indexOfLastUser = currentPage * usersPerPage;\n//     const indexOfFirstUser = indexOfLastUser - usersPerPage;\n//     const currentUsers = users.slice(indexOfFirstUser, indexOfLastUser);\n\n//     const paginate = (pageNumber) => setCurrentPage(pageNumber);\n//     const totalPages = Math.ceil(users.length / usersPerPage);\n\n//     // Handle to delete a user\n\n//     const handleDelete = async (id) => {\n//         try {\n//             await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n//             setUsers(users.filter((user) => user.id !== id));\n//         } catch {\n//             setError(\"Failed to delete the user. Please try again.\");\n//         }\n//     };\n\n//     // Handle to  edit a user\n//     const handleEdit = (user) => {\n//         setEditingUser(user);\n//         setShowForm(true);\n//     };\n\n//     // Handle to add a new user\n\n//     const handleAdd = () => {\n//         setEditingUser(null);\n//         setShowForm(true);\n//     };\n\n//     // Handle saving a new or edited user\n\n//     const handleSave = (newUser) => {\n//         if (editingUser) {\n//             // PUT request to update the user on the server\n\n//             axios.put(`https://jsonplaceholder.typicode.com/users/${newUser.id}`, newUser)\n//                 .then(response => {\n//                     setUsers(users.map((user) => (user.id === newUser.id ? newUser : user)));\n//                     setShowForm(false);\n//                 })\n//                 .catch(error => {\n//                     setError(\"Failed to save changes. Please try again.\");\n//                 });\n//         } else {\n//             // POST request to add a new user\n\n//             axios.post(\"https://jsonplaceholder.typicode.com/users\", newUser)\n//                 .then(response => {\n//                     // Simulate adding a new user by generating an ID\n//                     setUsers([...users, { ...newUser, id: Date.now() }]);\n//                     setShowForm(false);\n//                 })\n//                 .catch(error => {\n//                     setError(\"Failed to add the user. Please try again.\");\n//                 });\n//         }\n//     };\n\n//     return (\n//         <div className=\"user-list-container\">\n//             <h2>User List</h2>\n\n//             {/* user list table */}\n\n//             <div className=\"table-container\">\n//                 <table className=\"user-table\">\n//                     <thead>\n//                         <tr>\n//                             <th>ID</th>\n//                             <th>First Name</th>\n//                             <th>Last Name</th>\n//                             <th>Email</th>\n//                             <th>Department</th>\n//                             <th>Actions</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {currentUsers.map((user) => (\n//                             <tr key={user.id}>\n//                                 <td>{user.id}</td>\n//                                 <td>{user.name.split(\" \")[0]}</td>\n//                                 <td>{user.name.split(\" \")[1]}</td>\n//                                 <td>{user.email}</td>\n//                                 <td>{user.department || \"N/A\"}</td>\n//                                 <td>\n//                                     <button onClick={() => handleEdit(user)} className=\"edit-btn\">Edit</button>\n//                                     <button onClick={() => handleDelete(user.id)} className=\"delete-btn\">Delete</button>\n//                                 </td>\n//                             </tr>\n//                         ))}\n//                     </tbody>\n//                 </table>\n\n//                 {/* Pagination Button */}\n\n//                 <div className=\"pagination-container\">\n//                     {Array.from({ length: totalPages }, (_, index) => (\n//                         <button\n//                             key={index}\n//                             onClick={() => paginate(index + 1)}\n//                             className=\"pagination-btn\"\n//                         >\n//                             {index + 1}\n//                         </button>\n//                     ))}\n//                 </div>\n//             </div>\n\n//             {/* Add user button */}\n//             <div className=\"add-user-container\">\n//                 <button\n//                     onClick={handleAdd}\n//                     className=\"add-user-btn\"\n//                 >\n//                     Add User\n//                 </button>\n//             </div>\n\n//             {/* Render user from outside the list */}\n\n//             {showForm && (\n//                 <div className=\"user-form-container\">\n//                     <UserForm user={editingUser} onSave={handleSave} onCancel={() => setShowForm(false)} />\n//                 </div>\n//             )}\n\n//             {error && <p className=\"error-message\">{error}</p>}\n//         </div>\n//     );\n// };\n\n// export default UserList;","map":{"version":3,"names":[],"sources":["D:/assignment/user-management/src/components/UserList.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import UserForm from \"./UserForm\";\r\n// import \"./UserList.css\";\r\n\r\n// const UserList = () => {\r\n//     const [users, setUsers] = useState([]);\r\n//     const [error, setError] = useState(\"\");\r\n//     const [showForm, setShowForm] = useState(false);\r\n//     const [editingUser, setEditingUser] = useState(null);\r\n\r\n//     const [currentPage, setCurrentPage] = useState(1);\r\n//     const [usersPerPage] = useState(6); // Show 5 users per page\r\n\r\n//     // Fetch users from the API\r\n\r\n//     useEffect(() => {\r\n//         const fetchUsers = async () => {\r\n//             try {\r\n//                 const response = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\r\n//                 setUsers(response.data);\r\n//             } catch (err) {\r\n//                 setError(\"Failed to fetch users. Please try again later.\");\r\n//             }\r\n//         };\r\n//         fetchUsers();\r\n//     }, []);\r\n\r\n//     // Pagination Logic\r\n\r\n//     const indexOfLastUser = currentPage * usersPerPage;\r\n//     const indexOfFirstUser = indexOfLastUser - usersPerPage;\r\n//     const currentUsers = users.slice(indexOfFirstUser, indexOfLastUser);\r\n\r\n//     const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n//     const totalPages = Math.ceil(users.length / usersPerPage);\r\n\r\n//     // Handle to delete a user\r\n\r\n//     const handleDelete = async (id) => {\r\n//         try {\r\n//             await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n//             setUsers(users.filter((user) => user.id !== id));\r\n//         } catch {\r\n//             setError(\"Failed to delete the user. Please try again.\");\r\n//         }\r\n//     };\r\n\r\n//     // Handle to  edit a user\r\n//     const handleEdit = (user) => {\r\n//         setEditingUser(user);\r\n//         setShowForm(true);\r\n//     };\r\n\r\n//     // Handle to add a new user\r\n\r\n//     const handleAdd = () => {\r\n//         setEditingUser(null);\r\n//         setShowForm(true);\r\n//     };\r\n\r\n//     // Handle saving a new or edited user\r\n\r\n//     const handleSave = (newUser) => {\r\n//         if (editingUser) {\r\n//             // PUT request to update the user on the server\r\n\r\n//             axios.put(`https://jsonplaceholder.typicode.com/users/${newUser.id}`, newUser)\r\n//                 .then(response => {\r\n//                     setUsers(users.map((user) => (user.id === newUser.id ? newUser : user)));\r\n//                     setShowForm(false);\r\n//                 })\r\n//                 .catch(error => {\r\n//                     setError(\"Failed to save changes. Please try again.\");\r\n//                 });\r\n//         } else {\r\n//             // POST request to add a new user\r\n\r\n//             axios.post(\"https://jsonplaceholder.typicode.com/users\", newUser)\r\n//                 .then(response => {\r\n//                     // Simulate adding a new user by generating an ID\r\n//                     setUsers([...users, { ...newUser, id: Date.now() }]);\r\n//                     setShowForm(false);\r\n//                 })\r\n//                 .catch(error => {\r\n//                     setError(\"Failed to add the user. Please try again.\");\r\n//                 });\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"user-list-container\">\r\n//             <h2>User List</h2>\r\n\r\n//             {/* user list table */}\r\n\r\n//             <div className=\"table-container\">\r\n//                 <table className=\"user-table\">\r\n//                     <thead>\r\n//                         <tr>\r\n//                             <th>ID</th>\r\n//                             <th>First Name</th>\r\n//                             <th>Last Name</th>\r\n//                             <th>Email</th>\r\n//                             <th>Department</th>\r\n//                             <th>Actions</th>\r\n//                         </tr>\r\n//                     </thead>\r\n//                     <tbody>\r\n//                         {currentUsers.map((user) => (\r\n//                             <tr key={user.id}>\r\n//                                 <td>{user.id}</td>\r\n//                                 <td>{user.name.split(\" \")[0]}</td>\r\n//                                 <td>{user.name.split(\" \")[1]}</td>\r\n//                                 <td>{user.email}</td>\r\n//                                 <td>{user.department || \"N/A\"}</td>\r\n//                                 <td>\r\n//                                     <button onClick={() => handleEdit(user)} className=\"edit-btn\">Edit</button>\r\n//                                     <button onClick={() => handleDelete(user.id)} className=\"delete-btn\">Delete</button>\r\n//                                 </td>\r\n//                             </tr>\r\n//                         ))}\r\n//                     </tbody>\r\n//                 </table>\r\n\r\n//                 {/* Pagination Button */}\r\n\r\n//                 <div className=\"pagination-container\">\r\n//                     {Array.from({ length: totalPages }, (_, index) => (\r\n//                         <button\r\n//                             key={index}\r\n//                             onClick={() => paginate(index + 1)}\r\n//                             className=\"pagination-btn\"\r\n//                         >\r\n//                             {index + 1}\r\n//                         </button>\r\n//                     ))}\r\n//                 </div>\r\n//             </div>\r\n\r\n//             {/* Add user button */}\r\n//             <div className=\"add-user-container\">\r\n//                 <button\r\n//                     onClick={handleAdd}\r\n//                     className=\"add-user-btn\"\r\n//                 >\r\n//                     Add User\r\n//                 </button>\r\n//             </div>\r\n\r\n//             {/* Render user from outside the list */}\r\n\r\n//             {showForm && (\r\n//                 <div className=\"user-form-container\">\r\n//                     <UserForm user={editingUser} onSave={handleSave} onCancel={() => setShowForm(false)} />\r\n//                 </div>\r\n//             )}\r\n\r\n//             {error && <p className=\"error-message\">{error}</p>}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default UserList;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}